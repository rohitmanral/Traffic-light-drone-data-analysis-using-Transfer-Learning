# -*- coding: utf-8 -*-
"""Drone_data_Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xAj440QXatqumqO5D-0KGnvwn4C-tJQV

#<strong><center>Allripe</center></strong> 
#<strong><center>Kaggle Drone Dataset</center></strong>
#<strong><center>Data Analysis</center></strong>

### **Importing essential libraries**
"""

import os
import cv2
import numpy as np
from os.path import join
import matplotlib.pyplot as plt
from google.colab import drive
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.preprocessing import image 


drive.mount('/content/drive/')

from mpl_toolkits.mplot3d import Axes3D
from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plt # plotting
import numpy as np # linear algebra
import os # accessing directory structure
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
pd.set_option('display.float_format', lambda x: '%.3f' % x)
from pandas import DataFrame
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
from sklearn.metrics import confusion_matrix
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score
from sklearn.metrics import classification_report
import calendar
from matplotlib import pyplot as plt
from datetime import timedelta
from datetime import time
from datetime import date
from datetime import datetime
plt.style.use('seaborn')
# %matplotlib inline



from plotly import __version__
from plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot
import cufflinks as cf
init_notebook_mode(connected=True)
cf.go_offline()
import plotly
plotly.offline.init_notebook_mode(connected=True)

# Commented out IPython magic to ensure Python compatibility.
# !pip install brewer2mpl
import numpy as np
import pandas as pd
import matplotlib as mpl
import matplotlib.pyplot as plt
import seaborn as sns
import warnings; warnings.filterwarnings(action='once')

large = 22; med = 16; small = 12
params = {'axes.titlesize': large,
          'legend.fontsize': med,
          'figure.figsize': (16, 10),
          'axes.labelsize': med,
          'axes.titlesize': med,
          'xtick.labelsize': med,
          'ytick.labelsize': med,
          'figure.titlesize': large}
plt.rcParams.update(params)
plt.style.use('seaborn-whitegrid')
sns.set_style("white")
# %matplotlib inline

# Version
print(mpl.__version__)  #> 3.0.0
print(sns.__version__)  #> 0.9.0

"""#### **Plotting an image from dataset**"""

img=image.load_img("/content/drive/My Drive/Allripe/drone dataset 1/center/1479425445433499090.jpg")
plt.imshow(img)

"""reading the size of an images"""

cv2.imread("/content/drive/My Drive/Allripe/drone dataset 1/center/1479425441182877835.jpg").shape

"""reading the .csv file containing `frame_id` & `steering_angle` information."""

df1 = pd.read_csv('/content/drive/My Drive/Allripe/drone dataset 1/final_example.csv')
df1.head(5)

"""checking for null values in `df1` dataset. """

sns.heatmap(df1.isnull(),yticklabels=False,cbar=False,cmap='viridis')

"""Hence, there are no null values

# **Correlation**
The plots under correlation is used to visualize the relationship between 2 or more variables. That is, how does one variable change with respect to another.

#### 1) Correllogram
Correlogram is used to visually see the correlation metric between all possible pairs of numeric variables in a given dataframe (or 2D array).
"""

# Plot
plt.figure(figsize=(7,5), dpi= 80)
sns.heatmap(df1.corr(), xticklabels=df1.corr().columns, yticklabels=df1.corr().columns, cmap='RdYlGn', center=0, annot=True)

# Decorations
plt.title('Correlation of frame_id and steering_angle', fontsize=18)
plt.xticks(fontsize=12)
plt.yticks(fontsize=12)
plt.show()

"""So, the correlation between `frame_id` & `steering_angle` is 0.007 which means there is alomost no correlation.

#### 2) Pairwise Plot
Pairwise plot is a favorite in exploratory analysis to understand the relationship between all possible pairs of numeric variables. It is a must have tool for bivariate analysis.
"""

# Plot
plt.figure(figsize=(10,8), dpi= 80)
sns.pairplot(df1, kind="scatter", plot_kws=dict(s=80, edgecolor="white", linewidth=1.5))
plt.show()

"""So, `frame_id` has a constant distribution, however `steering_angle` showed some fluctuations.

#### 3) Scatter plot with linear regression line of best fit
If you want to understand how two variables change with respect to each other, the line of best fit is the way to go. The below plot shows how the line of best fit differs amongst various groups in the data. To disable the groupings and to just draw one line-of-best-fit for the entire dataset, remove the hue='cyl' parameter from the sns.lmplot() call below.
"""

# Plot
sns.set_style("dark")
gridobj = sns.lmplot(x="steering_angle", y="frame_id", data=df1, line_kws={'color': 'red'}, 
                     height=7, aspect=1.6, robust=True,  palette='tab10', 
                     scatter_kws=dict(s=60, linewidths=1.2, edgecolors='black'))

# Decorations
plt.title("Scatter plot of steering_angle with line of best fit", fontsize=25)
plt.show()

"""So, Scatterplot with line of best fit suggests that there is no linear regression present in `steering_angle`.

#### 4) Density Curves with Histogram
Density curve with histogram brings together the collective information conveyed by the two plots so you can have them both in a single figure instead of two.
"""

# Draw Plot
plt.figure(figsize=(9,6), dpi= 80)
sns.distplot(df1.steering_angle, color="dodgerblue", hist_kws={'alpha':.7}, kde_kws={'linewidth':3})

# Decoration
plt.title('Density Plot of steering_angle ', fontsize=22)
plt.legend()
plt.show()

"""So, the density plot of `steering_angle` is almost constant but also little bit fluctuating.

#### 5) Scatter and Density plot
"""

pd.plotting.scatter_matrix(df1, alpha=0.75, figsize=[10, 7], diagonal='kde')

"""The Scatter plots of `steering_angle` & `frame_id` are not showing any essential information. Besides, the `frame_id`'s density plot is constant, however `steering_angle`'s density plot is little bit fluctuating.

## **Mean, Median, and Mode of `steering_angle`**
"""

from scipy import stats

mean = np. mean(df1.steering_angle)
print("Mean: {}".format(mean))
median = np. median(df1.steering_angle)
print("Median: {}".format(median))
mode = stats. mode(df1.steering_angle)
print("Mode: {}".format(mode))

"""`Mode` represents that `steering_angle` `-0.39974693` got repeated the most at that particular road location which means the exact angle of road at that moment would be approximately `negative 40%`.

## **Outliers**
Noise and exceptions in the data.
"""

# Draw Plot
plt.figure(figsize=(10,7), dpi= 80)
sns.boxplot(df1.steering_angle, data=df1,meanline=True, showmeans=True, orient='h')

# Decoration
plt.title('Box Plot of steering_angle', fontsize=22)
plt.show()

"""This Boxplot does not contain any outlier which means this data doesn't contain any unexpected value that can modify the resultant values. So, no need of data transformation.

# **Transfer Learning in Keras using InceptionV3**
"""

import keras
from keras import backend as K
from keras.layers.core import Dense, Activation
from keras.optimizers import Adam
from keras.metrics import categorical_crossentropy
from keras.preprocessing.image import ImageDataGenerator
from keras.preprocessing import image
from keras.models import Model
from keras.applications import imagenet_utils
from keras.layers import Dense,GlobalAveragePooling2D
from keras.applications import InceptionV3
from keras.applications.inception_v3 import preprocess_input
import numpy as np
from IPython.display import Image
from keras.optimizers import Adam

mobile = keras.applications.inception_v3.InceptionV3()

from tensorflow.keras.preprocessing.image import ImageDataGenerator

train = ImageDataGenerator(rescale=1./255)

train_dataset= train.flow_from_directory('/content/drive/My Drive/Allripe/drone dataset 1/center/',
                                         target_size=(299, 299))

"""**Result of predicting all images**"""

from scipy import ndimage, misc
import numpy as np
import os
import cv2

path = "/content/drive/My Drive/Allripe/drone dataset 1/center/"

xyz=[]

# iterate through the names of contents of the folder
for image_path in os.listdir(path):
  # create the full input path and read the file
  input_path = os.path.join(path, image_path)
  img = image.load_img(input_path, color_mode='rgb', target_size=(299, 299))
  img_array = image.img_to_array(img)
  img_array_expanded_dims = np.expand_dims(img_array, axis=0)
  a=keras.applications.inception_v3.preprocess_input(img_array_expanded_dims)


  predictions = mobile.predict(a)
  results = imagenet_utils.decode_predictions(predictions)
  xyz.append(results)
xyz

"""**Result of predicting first image**"""

img=image.load_img("/content/drive/My Drive/Allripe/drone dataset 1/center/1479425441182877835.jpg")
plt.imshow(img)

xyz[0]

"""Top-most prediction result"""

xyz[0][0][0]

print("Prediction class: {}".format(xyz[0][0][0][1]))

print("Prediction accuracy: {}".format(xyz[0][0][0][2]))

"""**Top-most Prediction Result of all images** """

zzz=[]
for i in range(len(xyz)):
  for j in range(len(xyz[i])):
    for k in range(len(xyz[j])):
      zzz.append(xyz[i][j][0])

print(zzz)

"""`categories` will show all values """

categories=[]

for i in range(len(zzz)):
  #for j in range(len(zzz[i])):
  categories.append(zzz[i][1])

print(categories)

"""`output` will show only unique values """

output = np.unique(categories)
output

len(output)

"""We have total 88 categories of images.

Now, we will check count of every category of image
"""

unique, counts = np.unique(categories, return_counts=True)

aaa = np.asarray((unique, counts)).T
aaa

unique

counts

"""presenting actual number of images of each class in train dataset"""

df = pd.DataFrame({"Image class":unique,
                  "Count":counts})
df.head()

df_sorted_desc= df.sort_values('Count',ascending=False)
df_sorted_desc.head()

# Build the plot
fig, ax = plt.subplots(figsize=(30, 25))

ax.bar(df_sorted_desc['Image class'],df_sorted_desc['Count'], align='center', alpha=0.5)
ax.set_xlabel('Category',fontsize=30)
ax.set_ylabel('No of Images',fontsize=30)
ax.set_xticks(unique)
ax.set_xticklabels(df_sorted_desc['Image class'], rotation=40, ha="right")
ax.set_title('Image Category Vs No of Images',fontsize=30)
ax.yaxis.grid(True)



# Save the figure and show
plt.tight_layout()
plt.show()

df_new=df_sorted_desc.loc[df_sorted_desc['Count']>90]
df_new.head()

len(df_new)

# Explode out the 'Chemical' pie piece by offsetting it a greater amount
#explode = (0.12, 0.12, 0.1, 0.075,0.07, 0.05, 0.02, 0.02,0.02, 0.02, 0.02, 0.02,0.02, 0.02, 0.2, 0.1, 0.1, 0.1,0.1, 0.1, 0.2,0.1)

fig, ax = plt.subplots(figsize=(15, 11))
ax.pie(df_new['Count'],
       #explode=explode,
       labels=df_new['Image class'],
       autopct='%1.1f%%',
       startangle=90)
ax.set_xlabel('Category',fontsize=30)
ax.axis('equal')  # Equal aspect ratio ensures the pie chart is circular.
ax.set_title('Image Category Pie Chart',fontsize=30)


plt.show()

# Build the plot
fig, ax = plt.subplots(figsize=(10, 7))

ax.bar(df_new['Image class'],df_new['Count'], align='center', alpha=0.5)
ax.set_xlabel('Category',fontsize=30)
ax.set_ylabel('No of Images',fontsize=30)
#ax.set_xticks(unique)
ax.set_xticklabels(df_new['Image class'], rotation=40, ha="right")
ax.set_title('Main Image Categories Vs No of Images',fontsize=30)
ax.yaxis.grid(True)



# Save the figure and show
plt.tight_layout()
plt.show()

"""## **Conclusion**

**Therefore, the top 6 predictions are  `trailer_truck`, `traffic_light`, `racer`, `minibus`, `fire_engine`, `garbage_truck`.**
"""